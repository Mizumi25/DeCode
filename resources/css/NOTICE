How come i cant click anything in the fcking floatbox, the button, is theree reason, if it is zindex then record the components z index, let us start with z index of this three, import React, { useRef, useEffect } from 'react'

import gsap from 'gsap'



export default function FloatingToolbox({ tools }) {

  const floatingToolsRef = useRef(null)



  // Floating tools entrance animation

  useEffect(() => {

    const toolElements = floatingToolsRef.current?.children

    if (toolElements) {

      // Set initial state

      gsap.set(toolElements, { 

        x: -100, 

        opacity: 0,

        scale: 0.8

      })

      

      // Animate entrance

      gsap.to(toolElements, {

        x: 0,

        opacity: 1,

        scale: 1,

        duration: 0.6,

        stagger: 0.1,

        ease: "back.out(1.7)",

        delay: 0.5

      })

      

      // Add floating animation

      Array.from(toolElements).forEach((tool, i) => {

        gsap.to(tool, {

          y: Math.sin(i) * 2,

          duration: 2 + Math.random(),

          repeat: -1,

          yoyo: true,

          ease: "sine.inOut",

          delay: i * 0.2

        })

      })

    }

  }, [])



  const handleToolClick = (tool, e) => {

    e.stopPropagation()

    

    // Visual feedback animation

    gsap.to(e.currentTarget, {

      scale: 0.9,

      duration: 0.1,

      yoyo: true,

      repeat: 1,

      ease: "power2.out"

    })



    // Call the tool's action if it exists

    if (tool.action && typeof tool.action === 'function') {

      tool.action()

    }

  }



  return (

    <div className="absolute left-4 top-1/2 transform -translate-y-1/2 z-20">

      <div 

        ref={floatingToolsRef}

        className="flex flex-col gap-2"

      >

        {tools.map((tool, index) => {

          const Icon = tool.icon

          return (

            <div key={index} className="flex flex-col items-center group">

              {/* Floating Circle - Made much smaller */}

              <button

                onClick={(e) => handleToolClick(tool, e)}

                className={`

                  w-8 h-8 rounded-full flex items-center justify-center

                  transition-all duration-300 ease-out

                  hover:scale-110 hover:-translate-y-1 active:scale-95

                  focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500

                  ${tool.isPrimary 

                    ? 'shadow-md hover:shadow-lg' 

                    : 'shadow-sm hover:shadow-md'

                  }

                `}

                style={{

                  backgroundColor: tool.isPrimary 

                    ? 'var(--color-primary)' 

                    : 'var(--color-surface)',

                  boxShadow: tool.isPrimary 

                    ? 'var(--shadow-md), 0 0 15px rgba(160, 82, 255, 0.2)'

                    : 'var(--shadow-sm)',

                  border: tool.isPrimary 

                    ? 'none' 

                    : `1px solid var(--color-border)`

                }}

                title={tool.label}

                aria-label={tool.label}

              >

                <Icon 

                  className={`w-3.5 h-3.5 transition-colors duration-300 ${

                    tool.isPrimary ? 'text-white' : ''

                  }`}

                  style={{

                    color: tool.isPrimary ? 'white' : 'var(--color-text)'

                  }}

                />

              </button>

              

              {/* Floating Label - Made smaller */}

              <span 

                className="mt-1 text-xs font-medium opacity-60 group-hover:opacity-100 transition-opacity duration-300 text-center max-w-[60px]"

                style={{

                  color: 'var(--color-text)',

                  fontSize: '9px'

                }}

              >

                {tool.label}

              </span>

            </div>

          )

        })}

      </div>

    </div>

  )

}, import React, { useState, useRef, useCallback, useEffect } from 'react'

import { Plug, Lock, Unlock, MoreHorizontal } from 'lucide-react'

import { router } from '@inertiajs/react'



const sizes = [

  { w: 80, h: 56 },

  { w: 64, h: 96 },

  { w: 72, h: 72 },

  { w: 52, h: 40 },

  { w: 96, h: 64 },

]



export default function PreviewFrame({ 

  title = 'Untitled', 

  index = 0, 

  x = 0, 

  y = 0, 

  fileName = 'File1',

  frameId,

  isDragging = false,

  isLoading = false,

  onDragStart,

  onDrag,

  onDragEnd,

  zoom = 1,

  isDraggable = true,

  isDark = false

}) {

  const size = sizes[index % sizes.length]

  const [isLocked, setIsLocked] = useState(true)

  const [showLoadingContent, setShowLoadingContent] = useState(isLoading)

  const frameRef = useRef(null)

  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 })

  const [isMouseDown, setIsMouseDown] = useState(false)

  

  // Dummy avatar colors for stacked avatars

  const avatarColors = ['bg-blue-500', 'bg-green-500', 'bg-purple-500']



  // Simulate loading completion after 2-4 seconds

  useEffect(() => {

    if (isLoading) {

      const loadingTime = 2000 + Math.random() * 2000 // 2-4 seconds

      const timer = setTimeout(() => {

        setShowLoadingContent(false)

      }, loadingTime)

      return () => clearTimeout(timer)

    }

  }, [isLoading])



  const handleFrameClick = (e) => {

    // Prevent navigation if clicking on interactive elements

    if (e.target.closest('.lock-button') || 

        e.target.closest('.more-button') || 

        e.target.closest('.avatar') ||

        isDragging || 

        isMouseDown) {

      return

    }

    

    // Navigate to /forge

    router.visit('/forge')

  }



  const handleLockToggle = (e) => {

    e.stopPropagation()

    e.preventDefault()

    setIsLocked(!isLocked)

  }



  // Drag functionality - simplified and fixed

  const handleMouseDown = useCallback((e) => {

    // Only allow dragging if not clicking on interactive elements

    if (e.target.closest('.lock-button') || 

        e.target.closest('.more-button') || 

        e.target.closest('.avatar') ||

        !isDraggable) {

      return

    }

    

    e.stopPropagation()

    e.preventDefault()

    

    // Simple offset calculation

    const startX = e.clientX

    const startY = e.clientY

    const startFrameX = x

    const startFrameY = y

    

    setDragOffset({ 

      x: startX - startFrameX * zoom, 

      y: startY - startFrameY * zoom 

    })

    setIsMouseDown(true)

    

    if (onDragStart) {

      onDragStart(frameId)

    }

  }, [isDraggable, frameId, x, y, onDragStart, zoom])



  const handleMouseMove = useCallback((e) => {

    if (!isMouseDown || !isDraggable) return

    

    e.preventDefault()

    e.stopPropagation()

    

    // Calculate new position

    const newX = (e.clientX - dragOffset.x) / zoom

    const newY = (e.clientY - dragOffset.y) / zoom

    

    if (onDrag) {

      onDrag(frameId, Math.max(0, newX), Math.max(0, newY))

    }

  }, [isMouseDown, isDraggable, dragOffset, zoom, frameId, onDrag])



  const handleMouseUp = useCallback(() => {

    if (isMouseDown) {

      setIsMouseDown(false)

      if (onDragEnd) {

        onDragEnd(frameId)

      }

    }

  }, [isMouseDown, frameId, onDragEnd])



  // Attach global mouse events for dragging

  useEffect(() => {

    if (isMouseDown) {

      document.addEventListener('mousemove', handleMouseMove)

      document.addEventListener('mouseup', handleMouseUp)

      

      return () => {

        document.removeEventListener('mousemove', handleMouseMove)

        document.removeEventListener('mouseup', handleMouseUp)

      }

    }

  }, [isMouseDown, handleMouseMove, handleMouseUp])



  return (

    <div

      ref={frameRef}

      className={`preview-frame absolute rounded-xl p-3 cursor-pointer transition-all duration-300 ease-out flex flex-col group ${

        isDragging ? 'shadow-2xl scale-105 z-50' : 'shadow-lg hover:shadow-xl hover:-translate-y-1'

      } ${isLocked ? '' : 'ring-2 ring-blue-400 ring-opacity-50'}`}

      style={{

        top: y,

        left: x,

        width: `${size.w * 4}px`,

        height: `${size.h * 4}px`,

        backgroundColor: 'var(--color-surface)',

        borderColor: 'transparent',

        boxShadow: isDragging 

          ? '0 25px 50px -12px rgba(0, 0, 0, 0.25), 0 0 0 1px rgba(255, 255, 255, 0.1)' 

          : '0 10px 30px -5px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',

        backdropFilter: 'blur(10px)',

        background: isDark 

          ? 'linear-gradient(145deg, rgba(30, 41, 59, 0.8), rgba(15, 23, 42, 0.9))' 

          : 'linear-gradient(145deg, rgba(255, 255, 255, 0.9), rgba(248, 250, 252, 0.8))',

        border: '1px solid rgba(255, 255, 255, 0.1)',

      }}

      onClick={handleFrameClick}

      onMouseDown={handleMouseDown}

    >

      {/* Top Header with Frame Info and Controls */}

      <div className="flex items-center justify-between mb-3 -mt-1">

        {/* Left: Frame name and file connection */}

        <div className="flex items-center gap-2 text-xs" style={{ color: 'var(--color-text-muted)' }}>

          <span className="font-semibold text-sm">{title}</span>

          <span className="opacity-60">•</span>

          <span className="opacity-80">({fileName})</span>

          <Plug className="w-3.5 h-3.5 opacity-60" />

        </div>

        

        {/* Right: Lock, Avatars, and More options */}

        <div className="flex items-center gap-2">

          {/* Lock/Unlock toggle button with enhanced animation */}

          <button 

            className="lock-button p-1.5 rounded-lg hover:bg-white hover:bg-opacity-10 transition-all duration-500 ease-out hover:scale-110 group relative overflow-hidden"

            onClick={handleLockToggle}

            title={isLocked ? 'Unlock frame' : 'Lock frame'}

            style={{

              background: isLocked 

                ? 'transparent' 

                : 'linear-gradient(145deg, #3b82f6, #1d4ed8)',

              transform: `rotate(${isLocked ? 0 : -15}deg)`,

              boxShadow: isLocked 

                ? 'none' 

                : '0 4px 15px rgba(59, 130, 246, 0.3)',

            }}

          >

            <div className="relative z-10">

              <div 

                className="transition-all duration-500 ease-out"

                style={{

                  transform: `scale(${isLocked ? 1 : 1.1}) rotate(${isLocked ? 0 : 10}deg)`

                }}

              >

                {isLocked ? (

                  <Lock className="w-3.5 h-3.5 transition-all duration-500" 

                        style={{ color: 'var(--color-text-muted)' }} />

                ) : (

                  <Unlock className="w-3.5 h-3.5 text-white transition-all duration-500" />

                )}

              </div>

              

              {/* Animated unlock effect - enhanced */}

              {!isLocked && (

                <>

                  <div className="absolute inset-0 bg-blue-400 rounded-full animate-ping opacity-20"></div>

                  <div 

                    className="absolute inset-0 bg-gradient-to-r from-blue-400 to-cyan-400 rounded-full opacity-30 animate-pulse"

                    style={{ animationDuration: '2s' }}

                  ></div>

                </>

              )}

              

              {/* Smooth background transition */}

              <div 

                className={`absolute inset-0 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg transition-all duration-500 ease-out ${

                  isLocked ? 'scale-0 opacity-0' : 'scale-100 opacity-100'

                }`}

                style={{ zIndex: -1 }}

              ></div>

            </div>

          </button>

          

          {/* Stacked avatars with enhanced styling */}

          <div className="flex -space-x-1.5">

            {avatarColors.map((color, i) => (

              <div

                key={i}

                className={`avatar w-5 h-5 rounded-full border-2 border-white ${color} flex items-center justify-center shadow-sm hover:scale-110 transition-transform duration-200 cursor-pointer`}

                style={{ fontSize: '9px', color: 'white', fontWeight: 'bold' }}

                onClick={(e) => e.stopPropagation()}

              >

                {String.fromCharCode(65 + i)}

              </div>

            ))}

          </div>

          

          {/* More options with hover effect */}

          <button 

            className="more-button p-1.5 rounded-lg hover:bg-white hover:bg-opacity-10 transition-all duration-200 hover:scale-110"

            onClick={(e) => e.stopPropagation()}

          >

            <MoreHorizontal className="w-3.5 h-3.5" style={{ color: 'var(--color-text-muted)' }} />

          </button>

        </div>

      </div>

      

      {/* Content Area */}

      <div className="rounded-lg mb-3 flex-1 relative overflow-hidden">

        {showLoadingContent ? (

          /* Loading State */

          <div className="w-full h-full flex flex-col items-center justify-center bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-800 dark:to-gray-900">

            <svg className="w-8 h-8 animate-spin mb-3" viewBox="0 0 24 24" fill="none">

              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" />

              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8H4z" />

            </svg>

            <div className="text-xs opacity-60 font-medium">Loading preview...</div>

          </div>

        ) : (

          /* Static Preview Content */

          <div className="w-full h-full bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-blue-900 dark:to-indigo-900 rounded-lg overflow-hidden relative">

            {/* Mock webpage content */}

            <div className="absolute inset-0 p-3">

              {/* Mock header */}

              <div className="flex items-center gap-2 mb-2">

                <div className="w-3 h-3 rounded-full bg-red-400"></div>

                <div className="w-3 h-3 rounded-full bg-yellow-400"></div>

                <div className="w-3 h-3 rounded-full bg-green-400"></div>

              </div>

              

              {/* Mock content blocks */}

              <div className="space-y-2">

                <div className="h-2 bg-gray-300 dark:bg-gray-600 rounded w-3/4"></div>

                <div className="h-2 bg-gray-300 dark:bg-gray-600 rounded w-1/2"></div>

                <div className="h-6 bg-blue-200 dark:bg-blue-800 rounded mt-3"></div>

                <div className="grid grid-cols-2 gap-1 mt-2">

                  <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded"></div>

                  <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded"></div>

                </div>

              </div>

            </div>

          </div>

        )}

      </div>

      

      {/* Bottom mock lines - only show when not loading */}

      {!showLoadingContent && (

        <div className="space-y-2">

          <div

            className="rounded-full transition-all duration-300 group-hover:bg-blue-300"

            style={{

              height: '4px',

              width: '70%',

              backgroundColor: 'var(--color-border)',

            }}

          />

          <div

            className="rounded-full transition-all duration-300 group-hover:bg-blue-300"

            style={{

              height: '4px',

              width: '50%',

              backgroundColor: 'var(--color-border)',

            }}

          />

        </div>

      )}

      

      {/* Drag indicator */}

      {isDragging && (

        <div className="absolute -top-2 -left-2 w-4 h-4 bg-blue-500 rounded-full shadow-lg animate-pulse"></div>

      )}

    </div>

  )

}, import { useRef, useState, useCallback, useMemo } from 'react'

import { Head, usePage } from '@inertiajs/react'

import { Plus, Layers, FolderOpen, Code, Users, Upload, Briefcase } from 'lucide-react'

import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout'

import Panel from '@/Components/Panel'

import BackgroundLayers from '@/Components/Void/BackgroundLayers'

import FloatingToolbox from '@/Components/Void/FloatingToolbox'

import FramesContainer from '@/Components/Void/FramesContainer'

import DeleteButton from '@/Components/Void/DeleteButton'

import FrameCreator from '@/Components/Void/FrameCreator'

import Modal from '@/Components/Modal'

import { useScrollHandler } from '@/Components/Void/ScrollHandler'

import { useThemeStore } from '@/stores/useThemeStore'

import { useEditorStore } from '@/stores/useEditorStore'



export default function VoidPage() {

  const { project } = usePage().props // Get project from Inertia props

  const canvasRef = useRef(null)

  

  // Zustand stores

  const { isDark } = useThemeStore()

  const { panelStates, togglePanel } = useEditorStore()

  

  // Modal state

  const [showFrameCreator, setShowFrameCreator] = useState(false)

  

  // Zoom state

  const [zoom, setZoom] = useState(1)

  const minZoom = 0.25

  const maxZoom = 3

  

  // Infinite scroll state - INCREASED scroll bounds for larger void space

  const [scrollPosition, setScrollPosition] = useState({ x: 0, y: 0 })

  const [isDragging, setIsDragging] = useState(false)

  const [lastPointerPos, setLastPointerPos] = useState({ x: 0, y: 0 })

  const scrollBounds = { width: 8000, height: 6000 }



  // Frame state with drag support and collision detection - optimized

  const initialFrames = useMemo(() => [

    { id: 1, title: 'Frame1', fileName: 'File1', x: 400, y: 300, isDragging: false, isLoading: true },

    { id: 2, title: 'Frame2', fileName: 'File2', x: 1200, y: 400, isDragging: false, isLoading: false },

    { id: 3, title: 'Frame3', fileName: 'File3', x: 800, y: 800, isDragging: false, isLoading: true },

    { id: 4, title: 'Frame4', fileName: 'File4', x: 1600, y: 600, isDragging: false, isLoading: false },

    { id: 5, title: 'Frame5', fileName: 'File5', x: 600, y: 1200, isDragging: false, isLoading: true },

    { id: 6, title: 'Frame6', fileName: 'File6', x: 2400, y: 500, isDragging: false, isLoading: false },

    { id: 7, title: 'Frame7', fileName: 'File7', x: 2000, y: 1000, isDragging: false, isLoading: true },

    { id: 8, title: 'Frame8', fileName: 'File8', x: 3000, y: 700, isDragging: false, isLoading: false },

    { id: 9, title: 'Frame9', fileName: 'File9', x: 1000, y: 1600, isDragging: false, isLoading: false },

    { id: 10, title: 'Frame10', fileName: 'File10', x: 3500, y: 900, isDragging: false, isLoading: true },

    { id: 11, title: 'Frame11', fileName: 'File11', x: 2200, y: 1400, isDragging: false, isLoading: false },

    { id: 12, title: 'Frame12', fileName: 'File12', x: 4000, y: 1100, isDragging: false, isLoading: true },

  ], [])

  

  const [frames, setFrames] = useState(initialFrames)



  // Frame dimensions for collision detection

  const frameWidth = 320 // 80 * 4

  const frameHeight = 224 // 56 * 4 (average)



  // Collision detection helper - optimized

  const checkCollision = useCallback((newX, newY, frameId) => {

    const buffer = 20

    return frames.some(frame => {

      if (frame.id === frameId) return false

      

      return (

        newX < frame.x + frameWidth + buffer &&

        newX + frameWidth + buffer > frame.x &&

        newY < frame.y + frameHeight + buffer &&

        newY + frameHeight + buffer > frame.y

      )

    })

  }, [frames, frameWidth, frameHeight])



  // Frame drag handlers - optimized with useCallback

  const handleFrameDragStart = useCallback((frameId) => {

    setFrames(prev => prev.map(frame =>

      frame.id === frameId ? { ...frame, isDragging: true } : frame

    ))

  }, [])



  const handleFrameDrag = useCallback((frameId, newX, newY) => {

    // Check for collision

    if (checkCollision(newX, newY, frameId)) {

      return // Don't update position if collision detected

    }



    setFrames(prev => prev.map(frame =>

      frame.id === frameId ? { ...frame, x: Math.max(0, newX), y: Math.max(0, newY) } : frame

    ))

  }, [checkCollision])



  const handleFrameDragEnd = useCallback((frameId) => {

    setFrames(prev => prev.map(frame =>

      frame.id === frameId ? { ...frame, isDragging: false } : frame

    ))

  }, [])



  // Zoom handlers

  const handleZoom = useCallback((delta, centerX, centerY) => {

    const zoomFactor = delta > 0 ? 1.1 : 0.9

    const newZoom = Math.min(maxZoom, Math.max(minZoom, zoom * zoomFactor))

    

    if (newZoom === zoom) return



    // Calculate scroll position to zoom toward the center point

    const canvas = canvasRef.current

    if (canvas) {

      const rect = canvas.getBoundingClientRect()

      const mouseX = centerX - rect.left

      const mouseY = centerY - rect.top

      

      const zoomRatio = newZoom / zoom

      const newScrollX = scrollPosition.x + (mouseX / zoom) * (zoomRatio - 1)

      const newScrollY = scrollPosition.y + (mouseY / zoom) * (zoomRatio - 1)

      

      setScrollPosition({ x: newScrollX, y: newScrollY })

    }

    

    setZoom(newZoom)

  }, [zoom, scrollPosition])



  // Enhanced scroll handler with zoom support

  const enhancedScrollHandler = useScrollHandler({

    canvasRef,

    scrollPosition,

    setScrollPosition,

    isDragging,

    setIsDragging,

    lastPointerPos,

    setLastPointerPos,

    scrollBounds,

    zoom,

    onZoom: handleZoom

  })



  // Override the wheel handler to include zoom

  const handleWheel = useCallback((e) => {

    // Don't handle wheel events on frames

    if (e.target.closest('.preview-frame')) {

      return

    }

    

    if (e.ctrlKey || e.metaKey) {

      // Zoom with Ctrl/Cmd + wheel

      handleZoom(-e.deltaY, e.clientX, e.clientY)

    } else {

      // Regular scroll with zoom-adjusted sensitivity

      const sensitivity = 0.2 / zoom

      const deltaX = e.deltaX * sensitivity

      const deltaY = e.deltaY * sensitivity

      

      setScrollPosition(prev => {

        let newX = prev.x + deltaX

        let newY = prev.y + deltaY

        

        newX = ((newX % scrollBounds.width) + scrollBounds.width) % scrollBounds.width

        newY = ((newY % scrollBounds.height) + scrollBounds.height) % scrollBounds.height

        

        return { x: newX, y: newY }

      })

    }

    e.preventDefault()

  }, [zoom, scrollBounds, setScrollPosition, handleZoom])



  // Touch handlers that don't interfere with frames

  const handleTouchStart = (e) => {

    if (e.target.closest('.preview-frame')) {

      return

    }

    

    if (e.touches.length === 2) {

      const distance = getTouchDistance(e.touches)

      const center = getTouchCenter(e.touches)

      setTouchDistance(distance)

      setLastTouchCenter(center)

      e.preventDefault()

    }

  }



  const handleTouchMove = (e) => {

    if (e.target.closest('.preview-frame')) {

      return

    }

    

    if (e.touches.length === 2 && touchDistance > 0) {

      const newDistance = getTouchDistance(e.touches)

      const newCenter = getTouchCenter(e.touches)

      

      // Handle pinch zoom

      const scale = newDistance / touchDistance

      const zoomDelta = scale > 1 ? 1 : -1

      handleZoom(zoomDelta * 10, newCenter.x, newCenter.y)

      

      setTouchDistance(newDistance)

      setLastTouchCenter(newCenter)

      e.preventDefault()

    }

  }



  const handleTouchEnd = (e) => {

    if (e.touches.length < 2) {

      setTouchDistance(0)

    }

  }



  // Touch pinch zoom handling

  const [touchDistance, setTouchDistance] = useState(0)

  const [lastTouchCenter, setLastTouchCenter] = useState({ x: 0, y: 0 })



  const getTouchDistance = (touches) => {

    const dx = touches[0].clientX - touches[1].clientX

    const dy = touches[0].clientY - touches[1].clientY

    return Math.sqrt(dx * dx + dy * dy)

  }



  const getTouchCenter = (touches) => {

    return {

      x: (touches[0].clientX + touches[1].clientX) / 2,

      y: (touches[0].clientY + touches[1].clientY) / 2

    }

  }



  // Panel handlers

  const handlePanelClose = (panelId) => {

    togglePanel(panelId)

  }



  const handlePanelMaximize = (panelId) => {

    console.log('Maximizing panel:', panelId)

  }



  // Handle tool actions

  const handleToolAction = useCallback((toolLabel) => {

    switch (toolLabel) {

      case 'New Frame':

        setShowFrameCreator(true)

        break

      case 'Frames':

        togglePanel('frames-panel')

        break

      case 'Project Files':

        togglePanel('files-panel')

        break

      default:

        console.log(`Action for ${toolLabel} not implemented yet`)

    }

  }, [togglePanel])



  // Handle frame creation success

  const handleFrameCreated = useCallback((newFrame) => {

    // Add the new frame to the frames state

    const canvasData = newFrame.canvas_data || {}

    const position = canvasData.position || { x: 400, y: 300 }

    

    const frameForState = {

      id: newFrame.id,

      title: newFrame.name,

      fileName: `${newFrame.name}.${newFrame.type}`,

      x: position.x,

      y: position.y,

      isDragging: false,

      isLoading: false,

      uuid: newFrame.uuid,

      type: newFrame.type

    }



    setFrames(prev => [...prev, frameForState])

  }, [])



  // Floating tools configuration

  const floatingTools = [

    { icon: Plus, label: 'New Frame', isPrimary: true, action: () => handleToolAction('New Frame') },

    { icon: Layers, label: 'Frames', isPrimary: false, action: () => handleToolAction('Frames') },

    { icon: FolderOpen, label: 'Project Files', isPrimary: false, action: () => handleToolAction('Project Files') },

    { icon: Code, label: 'Code Handler', isPrimary: false, action: () => handleToolAction('Code Handler') },

    { icon: Users, label: 'Team Collaborations', isPrimary: false, action: () => handleToolAction('Team Collaborations') },

    { icon: Upload, label: 'Import', isPrimary: false, action: () => handleToolAction('Import') },

    { icon: Briefcase, label: 'Project', isPrimary: false, action: () => handleToolAction('Project') }

  ]



  return (

    <AuthenticatedLayout>

      <Head title={`Void - ${project?.name || 'Project'}`} />

      <div 

        ref={canvasRef}

        className={`relative w-full h-screen overflow-hidden transition-colors duration-1000 ${

          isDragging ? 'cursor-grabbing' : 'cursor-grab'

        } ${

          isDark 

            ? 'bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900' 

            : 'bg-gradient-to-br from-gray-100 via-blue-50 to-purple-50'

        }`}

        style={{

          backgroundColor: isDark ? 'var(--color-bg)' : 'var(--color-bg)',

          userSelect: 'none',

          touchAction: 'none',

          willChange: 'transform',

          backfaceVisibility: 'hidden',

          perspective: 1000

        }}

        onTouchStart={handleTouchStart}

        onTouchMove={handleTouchMove}

        onTouchEnd={handleTouchEnd}

        onWheel={handleWheel}

      >

        {/* Zoom indicator - centered and subtle */}

        <div className="fixed top-4 left-1/2 transform -translate-x-1/2 z-50 bg-black bg-opacity-30 backdrop-blur-sm text-white px-3 py-1 rounded-full text-xs font-mono opacity-60 hover:opacity-90 transition-opacity duration-200">

          {Math.round(zoom * 100)}%

        </div>



        {/* Background Layers */}

        <BackgroundLayers isDark={isDark} scrollPosition={scrollPosition} />



        {/* Floating Toolbox with actions */}

        <FloatingToolbox tools={floatingTools} />



        {/* Delete Button - Enhanced */}

        <DeleteButton zoom={zoom} />

        

        {/* Frames Container with zoom and drag support */}

        <div 

          className="absolute inset-0 z-15" 

          style={{ 

            transform: `scale(${zoom})`,

            transformOrigin: '0 0',

            willChange: 'transform' 

          }}

        >

          <FramesContainer 

            frames={frames} 

            scrollPosition={scrollPosition} 

            scrollBounds={scrollBounds}

            onFrameDragStart={handleFrameDragStart}

            onFrameDrag={handleFrameDrag}

            onFrameDragEnd={handleFrameDragEnd}

            zoom={zoom}

            isDark={isDark}

          />

        </div>

        

        {/* Dockable Panel - RIGHT SIDE ONLY with 2 stacked panels */}

        <Panel

          isOpen={true}

          panels={[

            {

              id: 'files-panel', 

              title: 'Project Files',

              content: (

                <div>

                  <h4 className="font-semibold mb-4 text-[var(--color-text)]">File Explorer</h4>

                  <div className="space-y-1">

                    <div className="flex items-center gap-2 p-2 hover:bg-[var(--color-bg-hover)] rounded cursor-pointer">

                      <FolderOpen className="w-4 h-4 text-[var(--color-primary)]" />

                      <span className="text-sm text-[var(--color-text)]">src/</span>

                    </div>

                    <div className="flex items-center gap-2 p-2 hover:bg-[var(--color-bg-hover)] rounded cursor-pointer ml-4">

                      <Code className="w-4 h-4 text-[var(--color-text-muted)]" />

                      <span className="text-sm text-[var(--color-text)]">components/</span>

                    </div>

                    <div className="flex items-center gap-2 p-2 hover:bg-[var(--color-bg-hover)] rounded cursor-pointer ml-4">

                      <Code className="w-4 h-4 text-[var(--color-text-muted)]" />

                      <span className="text-sm text-[var(--color-text)]">pages/</span>

                    </div>

                  </div>

                </div>

              ),

              closable: true

            },

            {

              id: 'frames-panel',

              title: 'Frames',

              content: (

                <div>

                  <div className="flex items-center justify-between mb-4">

                    <h4 className="font-semibold text-[var(--color-text)]">Frame Manager</h4>

                    <button

                      onClick={() => setShowFrameCreator(true)}

                      className="px-2 py-1 text-xs bg-[var(--color-primary)] text-white rounded hover:opacity-90 transition-opacity"

                    >

                      New Frame

                    </button>

                  </div>

                  <div className="space-y-2">

                    {frames.map((frame) => (

                      <div key={frame.id} className="p-3 rounded-lg bg-[var(--color-bg-muted)] border border-[var(--color-border)]">

                        <div className="flex items-center gap-2">

                          <Layers className="w-4 h-4 text-[var(--color-primary)]" />

                          <span className="text-sm text-[var(--color-text)]">{frame.title}</span>

                          {frame.isLoading && (

                            <div className="ml-auto">

                              <svg className="w-3 h-3 animate-spin" viewBox="0 0 24 24" fill="none">

                                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" />

                                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8H4z" />

                              </svg>

                            </div>

                          )}

                        </div>

                      </div>

                    ))}

                  </div>

                </div>

              ),

              closable: true

            }

          ]}

          allowedDockPositions={['right']}

          onPanelClose={handlePanelClose}

          onPanelMaximize={handlePanelMaximize}

        />



        {/* Frame Creator Modal */}

        <Modal

          show={showFrameCreator}

          onClose={() => setShowFrameCreator(false)}

          title="Create New Frame"

          maxWidth="lg"

          closeable={true}

          blurBackground={true}

        >

          <FrameCreator

            project={project}

            onFrameCreated={handleFrameCreated}

            onClose={() => setShowFrameCreator(false)}

          />

        </Modal>

      </div>

    </AuthenticatedLayout>

  )

}